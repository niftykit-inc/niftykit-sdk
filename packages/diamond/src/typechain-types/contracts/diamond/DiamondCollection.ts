/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  Signer,
  utils,
} from "ethers";

import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace INiftyKitV3 {
  export type DiamondArgsStruct = {
    owner: PromiseOrValue<string>;
    admin: PromiseOrValue<string>;
    treasury: PromiseOrValue<string>;
    royalty: PromiseOrValue<string>;
    trustedForwarder: PromiseOrValue<string>;
    royaltyBps: PromiseOrValue<BigNumberish>;
    name: PromiseOrValue<string>;
    symbol: PromiseOrValue<string>;
    baseURI: PromiseOrValue<string>;
    apps: PromiseOrValue<BytesLike>[];
  };

  export type DiamondArgsStructOutput = [
    string,
    string,
    string,
    string,
    string,
    number,
    string,
    string,
    string,
    string[]
  ] & {
    owner: string;
    admin: string;
    treasury: string;
    royalty: string;
    trustedForwarder: string;
    royaltyBps: number;
    name: string;
    symbol: string;
    baseURI: string;
    apps: string[];
  };
}

export interface DiamondCollectionInterface extends utils.Interface {
  functions: {};

  events: {};
}

export interface DiamondCollection extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DiamondCollectionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {};

  estimateGas: {};

  populateTransaction: {};
}