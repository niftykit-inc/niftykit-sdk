/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface ERC20AppFacetInterface extends utils.Interface {
  functions: {
    "erc20ActiveCoin()": FunctionFragment;
    "erc20CoinByIndex(uint256)": FunctionFragment;
    "erc20CoinsCount()": FunctionFragment;
    "erc20MintFee()": FunctionFragment;
    "erc20MintTo(address,uint64)": FunctionFragment;
    "erc20PresaleActive()": FunctionFragment;
    "erc20PresaleMintTo(address,uint64,uint256,bytes32[])": FunctionFragment;
    "erc20Price()": FunctionFragment;
    "erc20Revenue(address)": FunctionFragment;
    "erc20SaleActive()": FunctionFragment;
    "erc20SetActiveCoin(address)": FunctionFragment;
    "erc20StartSale(uint256,uint256,uint256,uint256,bool)": FunctionFragment;
    "erc20StopSale()": FunctionFragment;
    "erc20Withdraw(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "erc20ActiveCoin"
      | "erc20CoinByIndex"
      | "erc20CoinsCount"
      | "erc20MintFee"
      | "erc20MintTo"
      | "erc20PresaleActive"
      | "erc20PresaleMintTo"
      | "erc20Price"
      | "erc20Revenue"
      | "erc20SaleActive"
      | "erc20SetActiveCoin"
      | "erc20StartSale"
      | "erc20StopSale"
      | "erc20Withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "erc20ActiveCoin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "erc20CoinByIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "erc20CoinsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "erc20MintFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "erc20MintTo",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "erc20PresaleActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "erc20PresaleMintTo",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "erc20Price",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "erc20Revenue",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "erc20SaleActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "erc20SetActiveCoin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "erc20StartSale",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "erc20StopSale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "erc20Withdraw",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "erc20ActiveCoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc20CoinByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc20CoinsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc20MintFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc20MintTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc20PresaleActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc20PresaleMintTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "erc20Price", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "erc20Revenue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc20SaleActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc20SetActiveCoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc20StartSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc20StopSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc20Withdraw",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "ConsecutiveTransfer(uint256,uint256,address,address)": EventFragment;
    "OwnershipHandoverCanceled(address)": EventFragment;
    "OwnershipHandoverRequested(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RolesUpdated(address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConsecutiveTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipHandoverCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipHandoverRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RolesUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface ConsecutiveTransferEventObject {
  fromTokenId: BigNumber;
  toTokenId: BigNumber;
  from: string;
  to: string;
}
export type ConsecutiveTransferEvent = TypedEvent<
  [BigNumber, BigNumber, string, string],
  ConsecutiveTransferEventObject
>;

export type ConsecutiveTransferEventFilter =
  TypedEventFilter<ConsecutiveTransferEvent>;

export interface OwnershipHandoverCanceledEventObject {
  pendingOwner: string;
}
export type OwnershipHandoverCanceledEvent = TypedEvent<
  [string],
  OwnershipHandoverCanceledEventObject
>;

export type OwnershipHandoverCanceledEventFilter =
  TypedEventFilter<OwnershipHandoverCanceledEvent>;

export interface OwnershipHandoverRequestedEventObject {
  pendingOwner: string;
}
export type OwnershipHandoverRequestedEvent = TypedEvent<
  [string],
  OwnershipHandoverRequestedEventObject
>;

export type OwnershipHandoverRequestedEventFilter =
  TypedEventFilter<OwnershipHandoverRequestedEvent>;

export interface OwnershipTransferredEventObject {
  oldOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RolesUpdatedEventObject {
  user: string;
  roles: BigNumber;
}
export type RolesUpdatedEvent = TypedEvent<
  [string, BigNumber],
  RolesUpdatedEventObject
>;

export type RolesUpdatedEventFilter = TypedEventFilter<RolesUpdatedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface ERC20AppFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ERC20AppFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    erc20ActiveCoin(overrides?: CallOverrides): Promise<[string]>;

    erc20CoinByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    erc20CoinsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    erc20MintFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    erc20MintTo(
      recipient: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    erc20PresaleActive(overrides?: CallOverrides): Promise<[boolean]>;

    erc20PresaleMintTo(
      recipient: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      allowed: PromiseOrValue<BigNumberish>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    erc20Price(overrides?: CallOverrides): Promise<[BigNumber]>;

    erc20Revenue(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    erc20SaleActive(overrides?: CallOverrides): Promise<[boolean]>;

    erc20SetActiveCoin(
      tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    erc20StartSale(
      newMaxAmount: PromiseOrValue<BigNumberish>,
      newMaxPerMint: PromiseOrValue<BigNumberish>,
      newMaxPerWallet: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      presale: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    erc20StopSale(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    erc20Withdraw(
      tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  erc20ActiveCoin(overrides?: CallOverrides): Promise<string>;

  erc20CoinByIndex(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  erc20CoinsCount(overrides?: CallOverrides): Promise<BigNumber>;

  erc20MintFee(overrides?: CallOverrides): Promise<BigNumber>;

  erc20MintTo(
    recipient: PromiseOrValue<string>,
    quantity: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  erc20PresaleActive(overrides?: CallOverrides): Promise<boolean>;

  erc20PresaleMintTo(
    recipient: PromiseOrValue<string>,
    quantity: PromiseOrValue<BigNumberish>,
    allowed: PromiseOrValue<BigNumberish>,
    proof: PromiseOrValue<BytesLike>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  erc20Price(overrides?: CallOverrides): Promise<BigNumber>;

  erc20Revenue(
    tokenAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  erc20SaleActive(overrides?: CallOverrides): Promise<boolean>;

  erc20SetActiveCoin(
    tokenAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  erc20StartSale(
    newMaxAmount: PromiseOrValue<BigNumberish>,
    newMaxPerMint: PromiseOrValue<BigNumberish>,
    newMaxPerWallet: PromiseOrValue<BigNumberish>,
    newPrice: PromiseOrValue<BigNumberish>,
    presale: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  erc20StopSale(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  erc20Withdraw(
    tokenAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    erc20ActiveCoin(overrides?: CallOverrides): Promise<string>;

    erc20CoinByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    erc20CoinsCount(overrides?: CallOverrides): Promise<BigNumber>;

    erc20MintFee(overrides?: CallOverrides): Promise<BigNumber>;

    erc20MintTo(
      recipient: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    erc20PresaleActive(overrides?: CallOverrides): Promise<boolean>;

    erc20PresaleMintTo(
      recipient: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      allowed: PromiseOrValue<BigNumberish>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    erc20Price(overrides?: CallOverrides): Promise<BigNumber>;

    erc20Revenue(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    erc20SaleActive(overrides?: CallOverrides): Promise<boolean>;

    erc20SetActiveCoin(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    erc20StartSale(
      newMaxAmount: PromiseOrValue<BigNumberish>,
      newMaxPerMint: PromiseOrValue<BigNumberish>,
      newMaxPerWallet: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      presale: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    erc20StopSale(overrides?: CallOverrides): Promise<void>;

    erc20Withdraw(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "ConsecutiveTransfer(uint256,uint256,address,address)"(
      fromTokenId?: PromiseOrValue<BigNumberish> | null,
      toTokenId?: null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): ConsecutiveTransferEventFilter;
    ConsecutiveTransfer(
      fromTokenId?: PromiseOrValue<BigNumberish> | null,
      toTokenId?: null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): ConsecutiveTransferEventFilter;

    "OwnershipHandoverCanceled(address)"(
      pendingOwner?: PromiseOrValue<string> | null
    ): OwnershipHandoverCanceledEventFilter;
    OwnershipHandoverCanceled(
      pendingOwner?: PromiseOrValue<string> | null
    ): OwnershipHandoverCanceledEventFilter;

    "OwnershipHandoverRequested(address)"(
      pendingOwner?: PromiseOrValue<string> | null
    ): OwnershipHandoverRequestedEventFilter;
    OwnershipHandoverRequested(
      pendingOwner?: PromiseOrValue<string> | null
    ): OwnershipHandoverRequestedEventFilter;

    "OwnershipTransferred(address,address)"(
      oldOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      oldOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RolesUpdated(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      roles?: PromiseOrValue<BigNumberish> | null
    ): RolesUpdatedEventFilter;
    RolesUpdated(
      user?: PromiseOrValue<string> | null,
      roles?: PromiseOrValue<BigNumberish> | null
    ): RolesUpdatedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter;
  };

  estimateGas: {
    erc20ActiveCoin(overrides?: CallOverrides): Promise<BigNumber>;

    erc20CoinByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    erc20CoinsCount(overrides?: CallOverrides): Promise<BigNumber>;

    erc20MintFee(overrides?: CallOverrides): Promise<BigNumber>;

    erc20MintTo(
      recipient: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    erc20PresaleActive(overrides?: CallOverrides): Promise<BigNumber>;

    erc20PresaleMintTo(
      recipient: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      allowed: PromiseOrValue<BigNumberish>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    erc20Price(overrides?: CallOverrides): Promise<BigNumber>;

    erc20Revenue(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    erc20SaleActive(overrides?: CallOverrides): Promise<BigNumber>;

    erc20SetActiveCoin(
      tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    erc20StartSale(
      newMaxAmount: PromiseOrValue<BigNumberish>,
      newMaxPerMint: PromiseOrValue<BigNumberish>,
      newMaxPerWallet: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      presale: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    erc20StopSale(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    erc20Withdraw(
      tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    erc20ActiveCoin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    erc20CoinByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    erc20CoinsCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    erc20MintFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    erc20MintTo(
      recipient: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    erc20PresaleActive(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    erc20PresaleMintTo(
      recipient: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      allowed: PromiseOrValue<BigNumberish>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    erc20Price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    erc20Revenue(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    erc20SaleActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    erc20SetActiveCoin(
      tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    erc20StartSale(
      newMaxAmount: PromiseOrValue<BigNumberish>,
      newMaxPerMint: PromiseOrValue<BigNumberish>,
      newMaxPerWallet: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      presale: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    erc20StopSale(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    erc20Withdraw(
      tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}