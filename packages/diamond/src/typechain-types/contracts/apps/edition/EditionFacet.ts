/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace EditionStorage {
  export type EditionStruct = {
    tokenURI: PromiseOrValue<string>;
    merkleRoot: PromiseOrValue<BytesLike>;
    price: PromiseOrValue<BigNumberish>;
    quantity: PromiseOrValue<BigNumberish>;
    maxQuantity: PromiseOrValue<BigNumberish>;
    maxPerWallet: PromiseOrValue<BigNumberish>;
    maxPerMint: PromiseOrValue<BigNumberish>;
    nonce: PromiseOrValue<BigNumberish>;
    signer: PromiseOrValue<string>;
    active: PromiseOrValue<boolean>;
  };

  export type EditionStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    boolean
  ] & {
    tokenURI: string;
    merkleRoot: string;
    price: BigNumber;
    quantity: BigNumber;
    maxQuantity: BigNumber;
    maxPerWallet: BigNumber;
    maxPerMint: BigNumber;
    nonce: BigNumber;
    signer: string;
    active: boolean;
  };
}

export interface EditionFacetInterface extends utils.Interface {
  functions: {
    "createEdition(string,uint256,uint256,uint256,uint256)": FunctionFragment;
    "editionMintFee()": FunctionFragment;
    "editionRevenue()": FunctionFragment;
    "editionsCount()": FunctionFragment;
    "getEdition(uint256)": FunctionFragment;
    "getEditionPrice(uint256)": FunctionFragment;
    "mintEdition(address,uint256,uint256,bytes32[])": FunctionFragment;
    "setEditionActive(uint256,bool)": FunctionFragment;
    "setEditionMerkleRoot(uint256,bytes32)": FunctionFragment;
    "setEditionSigner(uint256,address)": FunctionFragment;
    "setEditionTokenURI(uint256,string)": FunctionFragment;
    "updateEdition(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createEdition"
      | "editionMintFee"
      | "editionRevenue"
      | "editionsCount"
      | "getEdition"
      | "getEditionPrice"
      | "mintEdition"
      | "setEditionActive"
      | "setEditionMerkleRoot"
      | "setEditionSigner"
      | "setEditionTokenURI"
      | "updateEdition"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createEdition",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "editionMintFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "editionRevenue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "editionsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEdition",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEditionPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "mintEdition",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setEditionActive",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setEditionMerkleRoot",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setEditionSigner",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setEditionTokenURI",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEdition",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "createEdition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editionMintFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editionRevenue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editionsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getEdition", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEditionPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintEdition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEditionActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEditionMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEditionSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEditionTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEdition",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "ConsecutiveTransfer(uint256,uint256,address,address)": EventFragment;
    "EditionCreated(uint256)": EventFragment;
    "EditionMinted(address,uint256,uint256,uint256)": EventFragment;
    "OwnershipHandoverCanceled(address)": EventFragment;
    "OwnershipHandoverRequested(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RolesUpdated(address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConsecutiveTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EditionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EditionMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipHandoverCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipHandoverRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RolesUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface ConsecutiveTransferEventObject {
  fromTokenId: BigNumber;
  toTokenId: BigNumber;
  from: string;
  to: string;
}
export type ConsecutiveTransferEvent = TypedEvent<
  [BigNumber, BigNumber, string, string],
  ConsecutiveTransferEventObject
>;

export type ConsecutiveTransferEventFilter =
  TypedEventFilter<ConsecutiveTransferEvent>;

export interface EditionCreatedEventObject {
  editionId: BigNumber;
}
export type EditionCreatedEvent = TypedEvent<
  [BigNumber],
  EditionCreatedEventObject
>;

export type EditionCreatedEventFilter = TypedEventFilter<EditionCreatedEvent>;

export interface EditionMintedEventObject {
  to: string;
  editionId: BigNumber;
  quantity: BigNumber;
  value: BigNumber;
}
export type EditionMintedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  EditionMintedEventObject
>;

export type EditionMintedEventFilter = TypedEventFilter<EditionMintedEvent>;

export interface OwnershipHandoverCanceledEventObject {
  pendingOwner: string;
}
export type OwnershipHandoverCanceledEvent = TypedEvent<
  [string],
  OwnershipHandoverCanceledEventObject
>;

export type OwnershipHandoverCanceledEventFilter =
  TypedEventFilter<OwnershipHandoverCanceledEvent>;

export interface OwnershipHandoverRequestedEventObject {
  pendingOwner: string;
}
export type OwnershipHandoverRequestedEvent = TypedEvent<
  [string],
  OwnershipHandoverRequestedEventObject
>;

export type OwnershipHandoverRequestedEventFilter =
  TypedEventFilter<OwnershipHandoverRequestedEvent>;

export interface OwnershipTransferredEventObject {
  oldOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RolesUpdatedEventObject {
  user: string;
  roles: BigNumber;
}
export type RolesUpdatedEvent = TypedEvent<
  [string, BigNumber],
  RolesUpdatedEventObject
>;

export type RolesUpdatedEventFilter = TypedEventFilter<RolesUpdatedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface EditionFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EditionFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createEdition(
      tokenURI: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      maxQuantity: PromiseOrValue<BigNumberish>,
      maxPerWallet: PromiseOrValue<BigNumberish>,
      maxPerMint: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    editionMintFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    editionRevenue(overrides?: CallOverrides): Promise<[BigNumber]>;

    editionsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getEdition(
      editionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[EditionStorage.EditionStructOutput]>;

    getEditionPrice(
      editionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    mintEdition(
      recipient: PromiseOrValue<string>,
      editionId: PromiseOrValue<BigNumberish>,
      quantity: PromiseOrValue<BigNumberish>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setEditionActive(
      editionId: PromiseOrValue<BigNumberish>,
      active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setEditionMerkleRoot(
      editionId: PromiseOrValue<BigNumberish>,
      merkleRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setEditionSigner(
      editionId: PromiseOrValue<BigNumberish>,
      signer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setEditionTokenURI(
      editionId: PromiseOrValue<BigNumberish>,
      tokenURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateEdition(
      editionId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      maxQuantity: PromiseOrValue<BigNumberish>,
      maxPerWallet: PromiseOrValue<BigNumberish>,
      maxPerMint: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  createEdition(
    tokenURI: PromiseOrValue<string>,
    price: PromiseOrValue<BigNumberish>,
    maxQuantity: PromiseOrValue<BigNumberish>,
    maxPerWallet: PromiseOrValue<BigNumberish>,
    maxPerMint: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  editionMintFee(overrides?: CallOverrides): Promise<BigNumber>;

  editionRevenue(overrides?: CallOverrides): Promise<BigNumber>;

  editionsCount(overrides?: CallOverrides): Promise<BigNumber>;

  getEdition(
    editionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<EditionStorage.EditionStructOutput>;

  getEditionPrice(
    editionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mintEdition(
    recipient: PromiseOrValue<string>,
    editionId: PromiseOrValue<BigNumberish>,
    quantity: PromiseOrValue<BigNumberish>,
    proof: PromiseOrValue<BytesLike>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setEditionActive(
    editionId: PromiseOrValue<BigNumberish>,
    active: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setEditionMerkleRoot(
    editionId: PromiseOrValue<BigNumberish>,
    merkleRoot: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setEditionSigner(
    editionId: PromiseOrValue<BigNumberish>,
    signer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setEditionTokenURI(
    editionId: PromiseOrValue<BigNumberish>,
    tokenURI: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateEdition(
    editionId: PromiseOrValue<BigNumberish>,
    price: PromiseOrValue<BigNumberish>,
    maxQuantity: PromiseOrValue<BigNumberish>,
    maxPerWallet: PromiseOrValue<BigNumberish>,
    maxPerMint: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createEdition(
      tokenURI: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      maxQuantity: PromiseOrValue<BigNumberish>,
      maxPerWallet: PromiseOrValue<BigNumberish>,
      maxPerMint: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    editionMintFee(overrides?: CallOverrides): Promise<BigNumber>;

    editionRevenue(overrides?: CallOverrides): Promise<BigNumber>;

    editionsCount(overrides?: CallOverrides): Promise<BigNumber>;

    getEdition(
      editionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<EditionStorage.EditionStructOutput>;

    getEditionPrice(
      editionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintEdition(
      recipient: PromiseOrValue<string>,
      editionId: PromiseOrValue<BigNumberish>,
      quantity: PromiseOrValue<BigNumberish>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setEditionActive(
      editionId: PromiseOrValue<BigNumberish>,
      active: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setEditionMerkleRoot(
      editionId: PromiseOrValue<BigNumberish>,
      merkleRoot: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setEditionSigner(
      editionId: PromiseOrValue<BigNumberish>,
      signer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setEditionTokenURI(
      editionId: PromiseOrValue<BigNumberish>,
      tokenURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateEdition(
      editionId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      maxQuantity: PromiseOrValue<BigNumberish>,
      maxPerWallet: PromiseOrValue<BigNumberish>,
      maxPerMint: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "ConsecutiveTransfer(uint256,uint256,address,address)"(
      fromTokenId?: PromiseOrValue<BigNumberish> | null,
      toTokenId?: null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): ConsecutiveTransferEventFilter;
    ConsecutiveTransfer(
      fromTokenId?: PromiseOrValue<BigNumberish> | null,
      toTokenId?: null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): ConsecutiveTransferEventFilter;

    "EditionCreated(uint256)"(
      editionId?: PromiseOrValue<BigNumberish> | null
    ): EditionCreatedEventFilter;
    EditionCreated(
      editionId?: PromiseOrValue<BigNumberish> | null
    ): EditionCreatedEventFilter;

    "EditionMinted(address,uint256,uint256,uint256)"(
      to?: PromiseOrValue<string> | null,
      editionId?: PromiseOrValue<BigNumberish> | null,
      quantity?: null,
      value?: null
    ): EditionMintedEventFilter;
    EditionMinted(
      to?: PromiseOrValue<string> | null,
      editionId?: PromiseOrValue<BigNumberish> | null,
      quantity?: null,
      value?: null
    ): EditionMintedEventFilter;

    "OwnershipHandoverCanceled(address)"(
      pendingOwner?: PromiseOrValue<string> | null
    ): OwnershipHandoverCanceledEventFilter;
    OwnershipHandoverCanceled(
      pendingOwner?: PromiseOrValue<string> | null
    ): OwnershipHandoverCanceledEventFilter;

    "OwnershipHandoverRequested(address)"(
      pendingOwner?: PromiseOrValue<string> | null
    ): OwnershipHandoverRequestedEventFilter;
    OwnershipHandoverRequested(
      pendingOwner?: PromiseOrValue<string> | null
    ): OwnershipHandoverRequestedEventFilter;

    "OwnershipTransferred(address,address)"(
      oldOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      oldOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RolesUpdated(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      roles?: PromiseOrValue<BigNumberish> | null
    ): RolesUpdatedEventFilter;
    RolesUpdated(
      user?: PromiseOrValue<string> | null,
      roles?: PromiseOrValue<BigNumberish> | null
    ): RolesUpdatedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter;
  };

  estimateGas: {
    createEdition(
      tokenURI: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      maxQuantity: PromiseOrValue<BigNumberish>,
      maxPerWallet: PromiseOrValue<BigNumberish>,
      maxPerMint: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    editionMintFee(overrides?: CallOverrides): Promise<BigNumber>;

    editionRevenue(overrides?: CallOverrides): Promise<BigNumber>;

    editionsCount(overrides?: CallOverrides): Promise<BigNumber>;

    getEdition(
      editionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEditionPrice(
      editionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintEdition(
      recipient: PromiseOrValue<string>,
      editionId: PromiseOrValue<BigNumberish>,
      quantity: PromiseOrValue<BigNumberish>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setEditionActive(
      editionId: PromiseOrValue<BigNumberish>,
      active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setEditionMerkleRoot(
      editionId: PromiseOrValue<BigNumberish>,
      merkleRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setEditionSigner(
      editionId: PromiseOrValue<BigNumberish>,
      signer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setEditionTokenURI(
      editionId: PromiseOrValue<BigNumberish>,
      tokenURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateEdition(
      editionId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      maxQuantity: PromiseOrValue<BigNumberish>,
      maxPerWallet: PromiseOrValue<BigNumberish>,
      maxPerMint: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createEdition(
      tokenURI: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      maxQuantity: PromiseOrValue<BigNumberish>,
      maxPerWallet: PromiseOrValue<BigNumberish>,
      maxPerMint: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    editionMintFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    editionRevenue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    editionsCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEdition(
      editionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEditionPrice(
      editionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintEdition(
      recipient: PromiseOrValue<string>,
      editionId: PromiseOrValue<BigNumberish>,
      quantity: PromiseOrValue<BigNumberish>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setEditionActive(
      editionId: PromiseOrValue<BigNumberish>,
      active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setEditionMerkleRoot(
      editionId: PromiseOrValue<BigNumberish>,
      merkleRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setEditionSigner(
      editionId: PromiseOrValue<BigNumberish>,
      signer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setEditionTokenURI(
      editionId: PromiseOrValue<BigNumberish>,
      tokenURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateEdition(
      editionId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      maxQuantity: PromiseOrValue<BigNumberish>,
      maxPerWallet: PromiseOrValue<BigNumberish>,
      maxPerMint: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}