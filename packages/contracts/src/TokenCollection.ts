/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PayableOverrides,
    PopulatedTransaction,
    Signer,
    utils,
  } from "ethers";
  import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
  import { Listener, Provider } from "@ethersproject/providers";
  import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
  
  export interface TokenCollectionInterface extends utils.Interface {
    contractName: "TokenCollection";
    functions: {
      "approve(address,uint256)": FunctionFragment;
      "balanceOf(address)": FunctionFragment;
      "burn(uint256)": FunctionFragment;
      "createRedeemable(string,uint256,uint256,uint256,uint256)": FunctionFragment;
      "getApproved(uint256)": FunctionFragment;
      "initialize(string,string,address,address,uint96)": FunctionFragment;
      "invalidate(uint256)": FunctionFragment;
      "isApprovedForAll(address,address)": FunctionFragment;
      "mint(address,string)": FunctionFragment;
      "name()": FunctionFragment;
      "owner()": FunctionFragment;
      "ownerOf(uint256)": FunctionFragment;
      "redeem(uint256,uint256,bytes)": FunctionFragment;
      "redeemableByIndex(uint256)": FunctionFragment;
      "renounceOwnership()": FunctionFragment;
      "revoke(uint256)": FunctionFragment;
      "royaltyInfo(uint256,uint256)": FunctionFragment;
      "safeTransferFrom(address,address,uint256)": FunctionFragment;
      "setApprovalForAll(address,bool)": FunctionFragment;
      "setDefaultRoyalty(address,uint96)": FunctionFragment;
      "setMerkleRoot(uint256,bytes32)": FunctionFragment;
      "setTokenRoyalty(uint256,address,uint96)": FunctionFragment;
      "setTreasury(address)": FunctionFragment;
      "supportsInterface(bytes4)": FunctionFragment;
      "symbol()": FunctionFragment;
      "tokenByIndex(uint256)": FunctionFragment;
      "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
      "tokenURI(uint256)": FunctionFragment;
      "totalRedeemables()": FunctionFragment;
      "totalRevenue()": FunctionFragment;
      "totalSupply()": FunctionFragment;
      "transferFrom(address,address,uint256)": FunctionFragment;
      "transferOwnership(address)": FunctionFragment;
      "treasury()": FunctionFragment;
      "withdraw()": FunctionFragment;
    };
  
    encodeFunctionData(
      functionFragment: "approve",
      values: [string, BigNumberish]
    ): string;
    encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
    encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
    encodeFunctionData(
      functionFragment: "createRedeemable",
      values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ): string;
    encodeFunctionData(
      functionFragment: "getApproved",
      values: [BigNumberish]
    ): string;
    encodeFunctionData(
      functionFragment: "initialize",
      values: [string, string, string, string, BigNumberish]
    ): string;
    encodeFunctionData(
      functionFragment: "invalidate",
      values: [BigNumberish]
    ): string;
    encodeFunctionData(
      functionFragment: "isApprovedForAll",
      values: [string, string]
    ): string;
    encodeFunctionData(
      functionFragment: "mint",
      values: [string, string]
    ): string;
    encodeFunctionData(functionFragment: "name", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(
      functionFragment: "ownerOf",
      values: [BigNumberish]
    ): string;
    encodeFunctionData(
      functionFragment: "redeem",
      values: [BigNumberish, BigNumberish, BytesLike]
    ): string;
    encodeFunctionData(
      functionFragment: "redeemableByIndex",
      values: [BigNumberish]
    ): string;
    encodeFunctionData(
      functionFragment: "renounceOwnership",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "revoke",
      values: [BigNumberish]
    ): string;
    encodeFunctionData(
      functionFragment: "royaltyInfo",
      values: [BigNumberish, BigNumberish]
    ): string;
    encodeFunctionData(
      functionFragment: "safeTransferFrom",
      values: [string, string, BigNumberish]
    ): string;
    encodeFunctionData(
      functionFragment: "setApprovalForAll",
      values: [string, boolean]
    ): string;
    encodeFunctionData(
      functionFragment: "setDefaultRoyalty",
      values: [string, BigNumberish]
    ): string;
    encodeFunctionData(
      functionFragment: "setMerkleRoot",
      values: [BigNumberish, BytesLike]
    ): string;
    encodeFunctionData(
      functionFragment: "setTokenRoyalty",
      values: [BigNumberish, string, BigNumberish]
    ): string;
    encodeFunctionData(functionFragment: "setTreasury", values: [string]): string;
    encodeFunctionData(
      functionFragment: "supportsInterface",
      values: [BytesLike]
    ): string;
    encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
    encodeFunctionData(
      functionFragment: "tokenByIndex",
      values: [BigNumberish]
    ): string;
    encodeFunctionData(
      functionFragment: "tokenOfOwnerByIndex",
      values: [string, BigNumberish]
    ): string;
    encodeFunctionData(
      functionFragment: "tokenURI",
      values: [BigNumberish]
    ): string;
    encodeFunctionData(
      functionFragment: "totalRedeemables",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "totalRevenue",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "totalSupply",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "transferFrom",
      values: [string, string, BigNumberish]
    ): string;
    encodeFunctionData(
      functionFragment: "transferOwnership",
      values: [string]
    ): string;
    encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
    encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  
    decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "createRedeemable",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "getApproved",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "invalidate", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "isApprovedForAll",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "redeemableByIndex",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "renounceOwnership",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "royaltyInfo",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "safeTransferFrom",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "setApprovalForAll",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "setDefaultRoyalty",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "setMerkleRoot",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "setTokenRoyalty",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "setTreasury",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "supportsInterface",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "tokenByIndex",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "tokenOfOwnerByIndex",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "totalRedeemables",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "totalRevenue",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "totalSupply",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "transferFrom",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "transferOwnership",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  
    events: {
      "Approval(address,address,uint256)": EventFragment;
      "ApprovalForAll(address,address,bool)": EventFragment;
      "Initialized(uint8)": EventFragment;
      "OwnershipTransferred(address,address)": EventFragment;
      "RedeemableCreated(uint256)": EventFragment;
      "TokenRedeemed(address,uint256,uint256)": EventFragment;
      "Transfer(address,address,uint256)": EventFragment;
    };
  
    getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RedeemableCreated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TokenRedeemed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  }
  
  export type ApprovalEvent = TypedEvent<
    [string, string, BigNumber],
    { owner: string; approved: string; tokenId: BigNumber }
  >;
  
  export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;
  
  export type ApprovalForAllEvent = TypedEvent<
    [string, string, boolean],
    { owner: string; operator: string; approved: boolean }
  >;
  
  export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;
  
  export type InitializedEvent = TypedEvent<[number], { version: number }>;
  
  export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;
  
  export type OwnershipTransferredEvent = TypedEvent<
    [string, string],
    { previousOwner: string; newOwner: string }
  >;
  
  export type OwnershipTransferredEventFilter =
    TypedEventFilter<OwnershipTransferredEvent>;
  
  export type RedeemableCreatedEvent = TypedEvent<
    [BigNumber],
    { redeemableId: BigNumber }
  >;
  
  export type RedeemableCreatedEventFilter =
    TypedEventFilter<RedeemableCreatedEvent>;
  
  export type TokenRedeemedEvent = TypedEvent<
    [string, BigNumber, BigNumber],
    { collector: string; redeemableId: BigNumber; quantity: BigNumber }
  >;
  
  export type TokenRedeemedEventFilter = TypedEventFilter<TokenRedeemedEvent>;
  
  export type TransferEvent = TypedEvent<
    [string, string, BigNumber],
    { from: string; to: string; tokenId: BigNumber }
  >;
  
  export type TransferEventFilter = TypedEventFilter<TransferEvent>;
  
  export interface TokenCollection extends BaseContract {
    contractName: "TokenCollection";
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
  
    interface: TokenCollectionInterface;
  
    queryFilter<TEvent extends TypedEvent>(
      event: TypedEventFilter<TEvent>,
      fromBlockOrBlockhash?: string | number | undefined,
      toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>;
  
    listeners<TEvent extends TypedEvent>(
      eventFilter?: TypedEventFilter<TEvent>
    ): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(
      eventFilter: TypedEventFilter<TEvent>
    ): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
  
    functions: {
      approve(
        to: string,
        tokenId: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;
  
      burn(
        tokenId: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      createRedeemable(
        uri: string,
        price: BigNumberish,
        maxAmount: BigNumberish,
        maxPerWallet: BigNumberish,
        maxPerMint: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      getApproved(
        tokenId: BigNumberish,
        overrides?: CallOverrides
      ): Promise<[string]>;
  
      initialize(
        name_: string,
        symbol_: string,
        treasury_: string,
        royalty_: string,
        royaltyFee_: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      invalidate(
        redeemableId: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      isApprovedForAll(
        owner: string,
        operator: string,
        overrides?: CallOverrides
      ): Promise<[boolean]>;
  
      mint(
        to: string,
        uri: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      name(overrides?: CallOverrides): Promise<[string]>;
  
      owner(overrides?: CallOverrides): Promise<[string]>;
  
      ownerOf(
        tokenId: BigNumberish,
        overrides?: CallOverrides
      ): Promise<[string]>;
  
      "redeem(uint256,uint256,bytes)"(
        redeemableId: BigNumberish,
        numberOfTokens: BigNumberish,
        signature: BytesLike,
        overrides?: PayableOverrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      "redeem(uint256,uint256,bytes,bytes32[])"(
        redeemableId: BigNumberish,
        numberOfTokens: BigNumberish,
        signature: BytesLike,
        proof: BytesLike[],
        overrides?: PayableOverrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      redeemableByIndex(
        index: BigNumberish,
        overrides?: CallOverrides
      ): Promise<
        [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          boolean,
          BigNumber
        ] & {
          uri: string;
          price: BigNumber;
          maxAmount: BigNumber;
          maxPerWallet: BigNumber;
          maxPerMint: BigNumber;
          redeemedCount: BigNumber;
          merkleRoot: string;
          active: boolean;
          nonce: BigNumber;
        }
      >;
  
      renounceOwnership(
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      revoke(
        redeemableId: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      royaltyInfo(
        _tokenId: BigNumberish,
        _salePrice: BigNumberish,
        overrides?: CallOverrides
      ): Promise<[string, BigNumber]>;
  
      "safeTransferFrom(address,address,uint256)"(
        from: string,
        to: string,
        tokenId: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      "safeTransferFrom(address,address,uint256,bytes)"(
        from: string,
        to: string,
        tokenId: BigNumberish,
        _data: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      setApprovalForAll(
        operator: string,
        approved: boolean,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      setDefaultRoyalty(
        receiver: string,
        feeNumerator: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      setMerkleRoot(
        redeemableId: BigNumberish,
        newRoot: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      setTokenRoyalty(
        tokenId: BigNumberish,
        receiver: string,
        feeNumerator: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      setTreasury(
        newTreasury: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      supportsInterface(
        interfaceId: BytesLike,
        overrides?: CallOverrides
      ): Promise<[boolean]>;
  
      symbol(overrides?: CallOverrides): Promise<[string]>;
  
      tokenByIndex(
        index: BigNumberish,
        overrides?: CallOverrides
      ): Promise<[BigNumber]>;
  
      tokenOfOwnerByIndex(
        owner: string,
        index: BigNumberish,
        overrides?: CallOverrides
      ): Promise<[BigNumber]>;
  
      tokenURI(
        tokenId: BigNumberish,
        overrides?: CallOverrides
      ): Promise<[string]>;
  
      totalRedeemables(overrides?: CallOverrides): Promise<[BigNumber]>;
  
      totalRevenue(overrides?: CallOverrides): Promise<[BigNumber]>;
  
      totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;
  
      transferFrom(
        from: string,
        to: string,
        tokenId: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      transferOwnership(
        newOwner: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      treasury(overrides?: CallOverrides): Promise<[string]>;
  
      withdraw(
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
    };
  
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;
  
    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    createRedeemable(
      uri: string,
      price: BigNumberish,
      maxAmount: BigNumberish,
      maxPerWallet: BigNumberish,
      maxPerMint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  
    initialize(
      name_: string,
      symbol_: string,
      treasury_: string,
      royalty_: string,
      royaltyFee_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    invalidate(
      redeemableId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  
    mint(
      to: string,
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    name(overrides?: CallOverrides): Promise<string>;
  
    owner(overrides?: CallOverrides): Promise<string>;
  
    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;
  
    "redeem(uint256,uint256,bytes)"(
      redeemableId: BigNumberish,
      numberOfTokens: BigNumberish,
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    "redeem(uint256,uint256,bytes,bytes32[])"(
      redeemableId: BigNumberish,
      numberOfTokens: BigNumberish,
      signature: BytesLike,
      proof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    redeemableByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        boolean,
        BigNumber
      ] & {
        uri: string;
        price: BigNumber;
        maxAmount: BigNumber;
        maxPerWallet: BigNumber;
        maxPerMint: BigNumber;
        redeemedCount: BigNumber;
        merkleRoot: string;
        active: boolean;
        nonce: BigNumber;
      }
    >;
  
    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    revoke(
      redeemableId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    royaltyInfo(
      _tokenId: BigNumberish,
      _salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;
  
    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    setDefaultRoyalty(
      receiver: string,
      feeNumerator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    setMerkleRoot(
      redeemableId: BigNumberish,
      newRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    setTokenRoyalty(
      tokenId: BigNumberish,
      receiver: string,
      feeNumerator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    setTreasury(
      newTreasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  
    symbol(overrides?: CallOverrides): Promise<string>;
  
    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  
    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  
    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;
  
    totalRedeemables(overrides?: CallOverrides): Promise<BigNumber>;
  
    totalRevenue(overrides?: CallOverrides): Promise<BigNumber>;
  
    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
  
    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    treasury(overrides?: CallOverrides): Promise<string>;
  
    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    callStatic: {
      approve(
        to: string,
        tokenId: BigNumberish,
        overrides?: CallOverrides
      ): Promise<void>;
  
      balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;
  
      burn(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;
  
      createRedeemable(
        uri: string,
        price: BigNumberish,
        maxAmount: BigNumberish,
        maxPerWallet: BigNumberish,
        maxPerMint: BigNumberish,
        overrides?: CallOverrides
      ): Promise<void>;
  
      getApproved(
        tokenId: BigNumberish,
        overrides?: CallOverrides
      ): Promise<string>;
  
      initialize(
        name_: string,
        symbol_: string,
        treasury_: string,
        royalty_: string,
        royaltyFee_: BigNumberish,
        overrides?: CallOverrides
      ): Promise<void>;
  
      invalidate(
        redeemableId: BigNumberish,
        overrides?: CallOverrides
      ): Promise<void>;
  
      isApprovedForAll(
        owner: string,
        operator: string,
        overrides?: CallOverrides
      ): Promise<boolean>;
  
      mint(to: string, uri: string, overrides?: CallOverrides): Promise<void>;
  
      name(overrides?: CallOverrides): Promise<string>;
  
      owner(overrides?: CallOverrides): Promise<string>;
  
      ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;
  
      "redeem(uint256,uint256,bytes)"(
        redeemableId: BigNumberish,
        numberOfTokens: BigNumberish,
        signature: BytesLike,
        overrides?: CallOverrides
      ): Promise<void>;
  
      "redeem(uint256,uint256,bytes,bytes32[])"(
        redeemableId: BigNumberish,
        numberOfTokens: BigNumberish,
        signature: BytesLike,
        proof: BytesLike[],
        overrides?: CallOverrides
      ): Promise<void>;
  
      redeemableByIndex(
        index: BigNumberish,
        overrides?: CallOverrides
      ): Promise<
        [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          boolean,
          BigNumber
        ] & {
          uri: string;
          price: BigNumber;
          maxAmount: BigNumber;
          maxPerWallet: BigNumber;
          maxPerMint: BigNumber;
          redeemedCount: BigNumber;
          merkleRoot: string;
          active: boolean;
          nonce: BigNumber;
        }
      >;
  
      renounceOwnership(overrides?: CallOverrides): Promise<void>;
  
      revoke(
        redeemableId: BigNumberish,
        overrides?: CallOverrides
      ): Promise<void>;
  
      royaltyInfo(
        _tokenId: BigNumberish,
        _salePrice: BigNumberish,
        overrides?: CallOverrides
      ): Promise<[string, BigNumber]>;
  
      "safeTransferFrom(address,address,uint256)"(
        from: string,
        to: string,
        tokenId: BigNumberish,
        overrides?: CallOverrides
      ): Promise<void>;
  
      "safeTransferFrom(address,address,uint256,bytes)"(
        from: string,
        to: string,
        tokenId: BigNumberish,
        _data: BytesLike,
        overrides?: CallOverrides
      ): Promise<void>;
  
      setApprovalForAll(
        operator: string,
        approved: boolean,
        overrides?: CallOverrides
      ): Promise<void>;
  
      setDefaultRoyalty(
        receiver: string,
        feeNumerator: BigNumberish,
        overrides?: CallOverrides
      ): Promise<void>;
  
      setMerkleRoot(
        redeemableId: BigNumberish,
        newRoot: BytesLike,
        overrides?: CallOverrides
      ): Promise<void>;
  
      setTokenRoyalty(
        tokenId: BigNumberish,
        receiver: string,
        feeNumerator: BigNumberish,
        overrides?: CallOverrides
      ): Promise<void>;
  
      setTreasury(newTreasury: string, overrides?: CallOverrides): Promise<void>;
  
      supportsInterface(
        interfaceId: BytesLike,
        overrides?: CallOverrides
      ): Promise<boolean>;
  
      symbol(overrides?: CallOverrides): Promise<string>;
  
      tokenByIndex(
        index: BigNumberish,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      tokenOfOwnerByIndex(
        owner: string,
        index: BigNumberish,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;
  
      totalRedeemables(overrides?: CallOverrides): Promise<BigNumber>;
  
      totalRevenue(overrides?: CallOverrides): Promise<BigNumber>;
  
      totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
  
      transferFrom(
        from: string,
        to: string,
        tokenId: BigNumberish,
        overrides?: CallOverrides
      ): Promise<void>;
  
      transferOwnership(
        newOwner: string,
        overrides?: CallOverrides
      ): Promise<void>;
  
      treasury(overrides?: CallOverrides): Promise<string>;
  
      withdraw(overrides?: CallOverrides): Promise<void>;
    };
  
    filters: {
      "Approval(address,address,uint256)"(
        owner?: string | null,
        approved?: string | null,
        tokenId?: BigNumberish | null
      ): ApprovalEventFilter;
      Approval(
        owner?: string | null,
        approved?: string | null,
        tokenId?: BigNumberish | null
      ): ApprovalEventFilter;
  
      "ApprovalForAll(address,address,bool)"(
        owner?: string | null,
        operator?: string | null,
        approved?: null
      ): ApprovalForAllEventFilter;
      ApprovalForAll(
        owner?: string | null,
        operator?: string | null,
        approved?: null
      ): ApprovalForAllEventFilter;
  
      "Initialized(uint8)"(version?: null): InitializedEventFilter;
      Initialized(version?: null): InitializedEventFilter;
  
      "OwnershipTransferred(address,address)"(
        previousOwner?: string | null,
        newOwner?: string | null
      ): OwnershipTransferredEventFilter;
      OwnershipTransferred(
        previousOwner?: string | null,
        newOwner?: string | null
      ): OwnershipTransferredEventFilter;
  
      "RedeemableCreated(uint256)"(
        redeemableId?: BigNumberish | null
      ): RedeemableCreatedEventFilter;
      RedeemableCreated(
        redeemableId?: BigNumberish | null
      ): RedeemableCreatedEventFilter;
  
      "TokenRedeemed(address,uint256,uint256)"(
        collector?: string | null,
        redeemableId?: BigNumberish | null,
        quantity?: null
      ): TokenRedeemedEventFilter;
      TokenRedeemed(
        collector?: string | null,
        redeemableId?: BigNumberish | null,
        quantity?: null
      ): TokenRedeemedEventFilter;
  
      "Transfer(address,address,uint256)"(
        from?: string | null,
        to?: string | null,
        tokenId?: BigNumberish | null
      ): TransferEventFilter;
      Transfer(
        from?: string | null,
        to?: string | null,
        tokenId?: BigNumberish | null
      ): TransferEventFilter;
    };
  
    estimateGas: {
      approve(
        to: string,
        tokenId: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;
  
      burn(
        tokenId: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      createRedeemable(
        uri: string,
        price: BigNumberish,
        maxAmount: BigNumberish,
        maxPerWallet: BigNumberish,
        maxPerMint: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      getApproved(
        tokenId: BigNumberish,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      initialize(
        name_: string,
        symbol_: string,
        treasury_: string,
        royalty_: string,
        royaltyFee_: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      invalidate(
        redeemableId: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      isApprovedForAll(
        owner: string,
        operator: string,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      mint(
        to: string,
        uri: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      name(overrides?: CallOverrides): Promise<BigNumber>;
  
      owner(overrides?: CallOverrides): Promise<BigNumber>;
  
      ownerOf(
        tokenId: BigNumberish,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      "redeem(uint256,uint256,bytes)"(
        redeemableId: BigNumberish,
        numberOfTokens: BigNumberish,
        signature: BytesLike,
        overrides?: PayableOverrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      "redeem(uint256,uint256,bytes,bytes32[])"(
        redeemableId: BigNumberish,
        numberOfTokens: BigNumberish,
        signature: BytesLike,
        proof: BytesLike[],
        overrides?: PayableOverrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      redeemableByIndex(
        index: BigNumberish,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      renounceOwnership(
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      revoke(
        redeemableId: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      royaltyInfo(
        _tokenId: BigNumberish,
        _salePrice: BigNumberish,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      "safeTransferFrom(address,address,uint256)"(
        from: string,
        to: string,
        tokenId: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      "safeTransferFrom(address,address,uint256,bytes)"(
        from: string,
        to: string,
        tokenId: BigNumberish,
        _data: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      setApprovalForAll(
        operator: string,
        approved: boolean,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      setDefaultRoyalty(
        receiver: string,
        feeNumerator: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      setMerkleRoot(
        redeemableId: BigNumberish,
        newRoot: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      setTokenRoyalty(
        tokenId: BigNumberish,
        receiver: string,
        feeNumerator: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      setTreasury(
        newTreasury: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      supportsInterface(
        interfaceId: BytesLike,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      symbol(overrides?: CallOverrides): Promise<BigNumber>;
  
      tokenByIndex(
        index: BigNumberish,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      tokenOfOwnerByIndex(
        owner: string,
        index: BigNumberish,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      tokenURI(
        tokenId: BigNumberish,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      totalRedeemables(overrides?: CallOverrides): Promise<BigNumber>;
  
      totalRevenue(overrides?: CallOverrides): Promise<BigNumber>;
  
      totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
  
      transferFrom(
        from: string,
        to: string,
        tokenId: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      transferOwnership(
        newOwner: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      treasury(overrides?: CallOverrides): Promise<BigNumber>;
  
      withdraw(
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
    };
  
    populateTransaction: {
      approve(
        to: string,
        tokenId: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      balanceOf(
        owner: string,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      burn(
        tokenId: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      createRedeemable(
        uri: string,
        price: BigNumberish,
        maxAmount: BigNumberish,
        maxPerWallet: BigNumberish,
        maxPerMint: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      getApproved(
        tokenId: BigNumberish,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      initialize(
        name_: string,
        symbol_: string,
        treasury_: string,
        royalty_: string,
        royaltyFee_: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      invalidate(
        redeemableId: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      isApprovedForAll(
        owner: string,
        operator: string,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      mint(
        to: string,
        uri: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      name(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      ownerOf(
        tokenId: BigNumberish,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      "redeem(uint256,uint256,bytes)"(
        redeemableId: BigNumberish,
        numberOfTokens: BigNumberish,
        signature: BytesLike,
        overrides?: PayableOverrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      "redeem(uint256,uint256,bytes,bytes32[])"(
        redeemableId: BigNumberish,
        numberOfTokens: BigNumberish,
        signature: BytesLike,
        proof: BytesLike[],
        overrides?: PayableOverrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      redeemableByIndex(
        index: BigNumberish,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      renounceOwnership(
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      revoke(
        redeemableId: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      royaltyInfo(
        _tokenId: BigNumberish,
        _salePrice: BigNumberish,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      "safeTransferFrom(address,address,uint256)"(
        from: string,
        to: string,
        tokenId: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      "safeTransferFrom(address,address,uint256,bytes)"(
        from: string,
        to: string,
        tokenId: BigNumberish,
        _data: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      setApprovalForAll(
        operator: string,
        approved: boolean,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      setDefaultRoyalty(
        receiver: string,
        feeNumerator: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      setMerkleRoot(
        redeemableId: BigNumberish,
        newRoot: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      setTokenRoyalty(
        tokenId: BigNumberish,
        receiver: string,
        feeNumerator: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      setTreasury(
        newTreasury: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      supportsInterface(
        interfaceId: BytesLike,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      tokenByIndex(
        index: BigNumberish,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      tokenOfOwnerByIndex(
        owner: string,
        index: BigNumberish,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      tokenURI(
        tokenId: BigNumberish,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      totalRedeemables(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      totalRevenue(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      transferFrom(
        from: string,
        to: string,
        tokenId: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      transferOwnership(
        newOwner: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      withdraw(
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
    };
  }